# Copyright 2021 Cloudera, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

- name: Setup symlinks for NiFi TLS keystore and truststore
  hosts: cluster
  become: yes
  gather_facts: no
  tasks:
    - name: Perform the NiFi workaround for explicit TLS
      block:

        - name: Ensure the NiFi home directory exists
          file:
            path: /var/lib/nifi
            owner: nifi
            group: nifi
            state: directory

        - name: Ensure the link for the NiFi keystore exists
          file:
            src: "{{ tls_keystore_path }}"
            dest: /var/lib/nifi/cm-auto-host_keystore.jks
            state: link

        - name: Ensure the link for the NiFi truststore exists
          file:
            src: "{{ tls_truststore_path }}"
            dest: /var/lib/nifi/cm-auto-in_cluster_truststore.jks
            state: link

        - name: Ensure the NiFi Registry home directory exists
          file:
            path: /var/lib/nifiregistry
            owner: nifiregistry
            group: nifiregistry
            state: directory

        - name: Ensure the link for the NiFi Registry keystore exists
          file:
            src: "{{ tls_keystore_path }}"
            dest: /var/lib/nifiregistry/cm-auto-host_keystore.jks
            state: link

        - name: Ensure the link for the NiFi Registry truststore exists
          file:
            src: "{{ tls_truststore_path }}"
            dest: /var/lib/nifiregistry/cm-auto-in_cluster_truststore.jks
            state: link

      when: >
        (tls | default(False)
        or manual_tls_cert_distribution | default(False))
        and not (autotls | default(False))
